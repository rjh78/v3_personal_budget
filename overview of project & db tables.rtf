{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue233;\red95\green255\blue7;
\red23\green23\blue23;\red202\green202\blue202;\red70\green137\blue204;\red194\green126\blue101;\red167\green197\blue152;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c93333;\cssrgb\c41569\c100000\c0;
\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;\cssrgb\c33725\c61176\c83922;\cssrgb\c80784\c56863\c47059;\cssrgb\c70980\c80784\c65882;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Personal Budget, Part 1\
For this project, you will build an API that allows clients to create and manage a personal budget. Using {\field{\*\fldinst{HYPERLINK "https://www.thebalance.com/what-is-envelope-budgeting-1293682"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 Envelope Budgeting}} principles, your API should allow users to manage budget envelopes and track the balance of each envelope. \
\pard\pardeftab720\partightenfactor0
\cf2 \
Personal Budget, Part 2\
In this project, you will extend the Personal Budget API created in Personal Budget, Part I. In the first Budget API, we did not have a way to persist data on the server. Now, we will build out a persistence layer (aka a database or DB) to keep track of the budget envelopes and their balances. You will need to plan out your database design, then use PostgreSQL to create the necessary tables. \
\
There are 3 types of transactions, expenses, transfers, income.\
\
Expense Transactions will have:\
Id, envelope name, date, amount, description, payment method (cash, credit card, checking act, savings act), Payee.\
\
Transfer Transactions will transfer dollars from one envelope to another envelope:\
Id, from envelope, to envelope, date, description, amount, name of transfer (optional)\
\
Income Transactions will record income such as W-2 income, 1099 Income, Gifts, etc:\
Id, Date Amount, Payer, description\
\
\pard\pardeftab720\partightenfactor0
\cf2 \outl0\strokewidth0 Each envelope will have a planned budget dollar amount for the month and then the API needs to return how many dollars are left for each envelope during the month based on expense transactions and transfer transactions.\
\
The total monthly budget needs to be tracked as well - this is the sum of all envelopes for the total monthly budget and then an amount of how much of that monthly budget is left after expense transactions and transfer transactions.\
\
Here is the API from Personal Budget, part 1:\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf4 \cb5 \outl0\strokewidth0 \strokec4 /*\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4     Author: Robert Hermann\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4     Date: April 29, 2024\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4     Description: Codecademy off-platform project to create API for budgeting app\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4 */\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb5 \strokec7 const\cf6 \strokec6  express = require(\cf8 \strokec8 "express"\cf6 \strokec6 );\cb1 \
\cf7 \cb5 \strokec7 const\cf6 \strokec6  app = express();\cb1 \
\cf7 \cb5 \strokec7 const\cf6 \strokec6  bodyParser = require(\cf8 \strokec8 "body-parser"\cf6 \strokec6 );\cb1 \
\
\cf7 \cb5 \strokec7 const\cf6 \strokec6  PORT = \cf9 \strokec9 3000\cf6 \strokec6 ;\cb1 \
\cf7 \cb5 \strokec7 let\cf6 \strokec6  categoryArray = [\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \{\cb1 \
\cb5     envId: \cf9 \strokec9 1\cf6 \strokec6 ,\cb1 \
\cb5     envName: \cf8 \strokec8 "Food-Market"\cf6 \strokec6 ,\cb1 \
\cb5     envBudget: \cf9 \strokec9 350\cf6 \strokec6 ,\cb1 \
\cb5   \},\cb1 \
\cb5   \{\cb1 \
\cb5     envId: \cf9 \strokec9 2\cf6 \strokec6 ,\cb1 \
\cb5     envName: \cf8 \strokec8 "Rent"\cf6 \strokec6 ,\cb1 \
\cb5     envBudget: \cf9 \strokec9 1500\cf6 \strokec6 ,\cb1 \
\cb5   \},\cb1 \
\cb5   \{\cb1 \
\cb5     envId: \cf9 \strokec9 3\cf6 \strokec6 ,\cb1 \
\cb5     envName: \cf8 \strokec8 "Auto-Gas"\cf6 \strokec6 ,\cb1 \
\cb5     envBudget: \cf9 \strokec9 80\cf6 \strokec6 ,\cb1 \
\cb5   \},\cb1 \
\cb5 ];\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb5 \strokec7 let\cf6 \strokec6  envId = \cf9 \strokec9 4\cf6 \strokec6 ;\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 \strokec4 //parses all incoming request data as JSON, i.e. strings\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 app.use(bodyParser.json());\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 \strokec4 //create a new envelope where the envelope name and dollar\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4 //amt are sent in the request body.\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4 //POSTMAN TESTING NOTE: BODY DATA MUST BE FORMATTED AS JSON,\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4 //EXCEPT FOR INTEGERS WHICH ARE NOT QUOTED\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 app.post(\cf8 \strokec8 "/envelopes"\cf6 \strokec6 , (req, res) \cf7 \strokec7 =>\cf6 \strokec6  \{\cb1 \
\cb5   \cf7 \strokec7 const\cf6 \strokec6  \{ envName, envBudget \} = req.body;\cb1 \
\cb5   \cf7 \strokec7 if\cf6 \strokec6  (envName === \cf8 \strokec8 ""\cf6 \strokec6  || envBudget < \cf9 \strokec9 0\cf6 \strokec6 ) \{\cb1 \
\cb5     res.status(\cf9 \strokec9 404\cf6 \strokec6 ).send(\cf8 \strokec8 "Invalid request body - no name or budget."\cf6 \strokec6 );\cb1 \
\cb5   \}\cb1 \
\cb5   \cf7 \strokec7 const\cf6 \strokec6  newCategory = \{ envId: envId, envName: envName, envBudget: envBudget \};\cb1 \
\cb5   envId++;\cb1 \
\cb5   categoryArray.push(newCategory);\cb1 \
\cb5   res.status(\cf9 \strokec9 201\cf6 \strokec6 ).json(newCategory);\cb1 \
\cb5 \});\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 \strokec4 //return all envelope categories created\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 app.get(\cf8 \strokec8 "/envelopes"\cf6 \strokec6 , (req, res) \cf7 \strokec7 =>\cf6 \strokec6  \{\cb1 \
\cb5   \cf7 \strokec7 if\cf6 \strokec6  (categoryArray.length > \cf9 \strokec9 0\cf6 \strokec6 ) \{\cb1 \
\cb5     res.status(\cf9 \strokec9 200\cf6 \strokec6 ).json(categoryArray);\cb1 \
\cb5   \} \cf7 \strokec7 else\cf6 \strokec6  \{\cb1 \
\cb5     res.status(\cf9 \strokec9 404\cf6 \strokec6 ).send(\cf8 \strokec8 "No categories created yet."\cf6 \strokec6 );\cb1 \
\cb5   \}\cb1 \
\cb5 \});\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 \strokec4 //return a specific envelope where the envelope ID is\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4 //sent in the query parameter. req.params.envId is read\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4 //as a string, so convert to an integer for endpoint to work\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 app.get(\cf8 \strokec8 "/envelopes/:envId"\cf6 \strokec6 , (req, res) \cf7 \strokec7 =>\cf6 \strokec6  \{\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  searchId = Number(req.params.envId);\cb1 \
\cb5   \cf7 \strokec7 const\cf6 \strokec6  found = categoryArray.find((element) \cf7 \strokec7 =>\cf6 \strokec6  element.envId === searchId);\cb1 \
\cb5   \cf7 \strokec7 if\cf6 \strokec6  (found) \{\cb1 \
\cb5     res.status(\cf9 \strokec9 200\cf6 \strokec6 ).json(found);\cb1 \
\cb5   \} \cf7 \strokec7 else\cf6 \strokec6  \{\cb1 \
\cb5     res.status(\cf9 \strokec9 404\cf6 \strokec6 ).send(\cf8 \strokec8 `Envelope ID: \cf7 \strokec7 $\{\cf6 \strokec6 searchId\cf7 \strokec7 \}\cf8 \strokec8  not found.`\cf6 \strokec6 );\cb1 \
\cb5   \}\cb1 \
\cb5 \});\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 \strokec4 /*\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4   Probably more complicated than it should be. Does the following:\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4   1. updates envelope name only\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4   2. updates envelope budget amount only\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4   3. updates both name and budget amounts\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4   4. subtracts expense from specified envelope budget\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4 */\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 app.put(\cf8 \strokec8 "/envelopes/:envId"\cf6 \strokec6 , (req, res, next) \cf7 \strokec7 =>\cf6 \strokec6  \{\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  searchId = Number(req.params.envId);\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  expenseAmt = req.body.expenseAmt;\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  newBudget = req.body.envBudget;\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  newName = req.body.envName;\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  action = req.query.action;\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  newBalance = \cf9 \strokec9 0\cf6 \strokec6 ;\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  found = categoryArray.find((element) \cf7 \strokec7 =>\cf6 \strokec6  element.envId === searchId);\cb1 \
\cb5   \cf7 \strokec7 const\cf6 \strokec6  dollarErr = \cf7 \strokec7 new\cf6 \strokec6  Error(\cb1 \
\cb5     \cf8 \strokec8 "expenseAmt or envBudget must be a positive number."\cf6 \cb1 \strokec6 \
\cb5   );\cb1 \
\cb5   \cf7 \strokec7 const\cf6 \strokec6  nameErr = \cf7 \strokec7 new\cf6 \strokec6  Error(\cf8 \strokec8 "Envelope Name is invalid or missing."\cf6 \strokec6 );\cb1 \
\
\cb5   \cf7 \strokec7 if\cf6 \strokec6  (found) \{\cb1 \
\cb5     \cf7 \strokec7 switch\cf6 \strokec6  (action) \{\cb1 \
\cb5       \cf7 \strokec7 case\cf6 \strokec6  \cf8 \strokec8 "updateName"\cf6 \strokec6 :\cb1 \
\cb5         \cf7 \strokec7 if\cf6 \strokec6  (newName) \{\cb1 \
\cb5           found.envName = newName;\cb1 \
\cb5         \} \cf7 \strokec7 else\cf6 \strokec6  \{\cb1 \
\cb5           \cf7 \strokec7 return\cf6 \strokec6  next(nameErr);\cb1 \
\cb5         \}\cb1 \
\cb5         \cf7 \strokec7 break\cf6 \strokec6 ;\cb1 \
\cb5       \cf7 \strokec7 case\cf6 \strokec6  \cf8 \strokec8 "updateBudget"\cf6 \strokec6 :\cb1 \
\cb5         \cf7 \strokec7 if\cf6 \strokec6  (newBudget > \cf9 \strokec9 0\cf6 \strokec6 ) \{\cb1 \
\cb5           found.envBudget = newBudget;\cb1 \
\cb5         \} \cf7 \strokec7 else\cf6 \strokec6  \{\cb1 \
\cb5           \cf7 \strokec7 return\cf6 \strokec6  next(dollarErr);\cb1 \
\cb5         \}\cb1 \
\cb5         \cf7 \strokec7 break\cf6 \strokec6 ;\cb1 \
\cb5       \cf7 \strokec7 case\cf6 \strokec6  \cf8 \strokec8 "updateNameAndBudget"\cf6 \strokec6 :\cb1 \
\cb5         \cf7 \strokec7 if\cf6 \strokec6  (newBudget > \cf9 \strokec9 0\cf6 \strokec6  && newName) \{\cb1 \
\cb5           found.envName = newName;\cb1 \
\cb5           found.envBudget = newBudget;\cb1 \
\cb5         \} \cf7 \strokec7 else\cf6 \strokec6  \{\cb1 \
\cb5           \cf7 \strokec7 return\cf6 \strokec6  next(\cb1 \
\cb5             \cf7 \strokec7 new\cf6 \strokec6  Error(\cf8 \strokec8 "Either name or budget is invalid or missing."\cf6 \strokec6 )\cb1 \
\cb5           );\cb1 \
\cb5         \}\cb1 \
\cb5         \cf7 \strokec7 break\cf6 \strokec6 ;\cb1 \
\cb5       \cf7 \strokec7 case\cf6 \strokec6  \cf8 \strokec8 "subtractExpense"\cf6 \strokec6 :\cb1 \
\cb5         \cf7 \strokec7 if\cf6 \strokec6  (expenseAmt > \cf9 \strokec9 0\cf6 \strokec6 ) \{\cb1 \
\cb5           found.envBudget -= expenseAmt;\cb1 \
\cb5         \} \cf7 \strokec7 else\cf6 \strokec6  \{\cb1 \
\cb5           \cf7 \strokec7 return\cf6 \strokec6  next(dollarErr);\cb1 \
\cb5         \}\cb1 \
\cb5         \cf7 \strokec7 break\cf6 \strokec6 ;\cb1 \
\cb5       \cf7 \strokec7 default\cf6 \strokec6 :\cb1 \
\cb5         \cf7 \strokec7 return\cf6 \strokec6  res.status(\cf9 \strokec9 500\cf6 \strokec6 ).send(\cf8 \strokec8 "Invalid Action or no Action specified."\cf6 \strokec6 );\cb1 \
\cb5     \}\cb1 \
\cb5     res.status(\cf9 \strokec9 200\cf6 \strokec6 ).json(categoryArray);\cb1 \
\cb5   \} \cf7 \strokec7 else\cf6 \strokec6  \{\cb1 \
\cb5     res.status(\cf9 \strokec9 404\cf6 \strokec6 ).send(\cf8 \strokec8 `Envelope ID: \cf7 \strokec7 $\{\cf6 \strokec6 searchId\cf7 \strokec7 \}\cf8 \strokec8  not found.`\cf6 \strokec6 );\cb1 \
\cb5   \}\cb1 \
\cb5 \});\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 \strokec4 //POST request that uses two parameters and transfers\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4 //a value of dollars from one envelope to another.\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 app.post(\cf8 \strokec8 "/envelopes/transfer/:from/:to"\cf6 \strokec6 , (req, res, next) \cf7 \strokec7 =>\cf6 \strokec6  \{\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  fromId = Number(req.params.from);\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  toId = Number(req.params.to);\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  transferAmt = req.body.transferAmt;\cb1 \
\
\cb5   \cf7 \strokec7 let\cf6 \strokec6  fromIndex = categoryArray.findIndex(\cb1 \
\cb5     (element) \cf7 \strokec7 =>\cf6 \strokec6  element.envId === fromId\cb1 \
\cb5   );\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  toIndex = categoryArray.findIndex((element) \cf7 \strokec7 =>\cf6 \strokec6  element.envId === toId);\cb1 \
\
\cb5   \cf7 \strokec7 if\cf6 \strokec6  (fromIndex === -\cf9 \strokec9 1\cf6 \strokec6  || toIndex === -\cf9 \strokec9 1\cf6 \strokec6 ) \{\cb1 \
\cb5     \cf7 \strokec7 return\cf6 \strokec6  next(\cb1 \
\cb5       \cf7 \strokec7 new\cf6 \strokec6  Error(\cb1 \
\cb5         \cf8 \strokec8 `'Transfer From' id \cf7 \strokec7 $\{\cf6 \strokec6 fromId\cf7 \strokec7 \}\cf8 \strokec8  or 'Transfer To' id \cf7 \strokec7 $\{\cf6 \strokec6 toId\cf7 \strokec7 \}\cf8 \strokec8  not found.`\cf6 \cb1 \strokec6 \
\cb5       )\cb1 \
\cb5     );\cb1 \
\cb5   \}\cb1 \
\
\cb5   categoryArray[fromIndex].envBudget -= transferAmt;\cb1 \
\cb5   categoryArray[toIndex].envBudget += transferAmt;\cb1 \
\
\cb5   res\cb1 \
\cb5     .status(\cf9 \strokec9 200\cf6 \strokec6 )\cb1 \
\cb5     .send(\cb1 \
\cb5       \cf8 \strokec8 `\cf7 \strokec7 $\{\cf6 \strokec6 transferAmt\cf7 \strokec7 \}\cf8 \strokec8  transferred from \cf7 \strokec7 $\{\cf6 \strokec6 categoryArray[fromIndex].envName\cf7 \strokec7 \}\cf8 \strokec8  to \cf7 \strokec7 $\{\cf6 \strokec6 categoryArray[toIndex].envName\cf7 \strokec7 \}\cf8 \strokec8 .`\cf6 \cb1 \strokec6 \
\cb5     );\cb1 \
\cb5 \});\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 \strokec4 //deletes the specified envelope id by finding the array\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4 //index of the specified id and then "splicing" it out\cf6 \cb1 \strokec6 \
\cf4 \cb5 \strokec4 //of the array\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 app.delete(\cf8 \strokec8 "/envelopes/:envId"\cf6 \strokec6 , (req, res, next) \cf7 \strokec7 =>\cf6 \strokec6  \{\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  searchId = Number(req.params.envId);\cb1 \
\cb5   \cf7 \strokec7 let\cf6 \strokec6  envIndex = categoryArray.findIndex(\cb1 \
\cb5     (element) \cf7 \strokec7 =>\cf6 \strokec6  element.envId === searchId\cb1 \
\cb5   );\cb1 \
\cb5   \cf7 \strokec7 if\cf6 \strokec6  (envIndex === -\cf9 \strokec9 1\cf6 \strokec6 ) \{\cb1 \
\cb5     \cf7 \strokec7 return\cf6 \strokec6  next(\cb1 \
\cb5       \cf7 \strokec7 new\cf6 \strokec6  Error(\cf8 \strokec8 `Envelope ID \cf7 \strokec7 $\{\cf6 \strokec6 searchId\cf7 \strokec7 \}\cf8 \strokec8  not found. No deletion done.`\cf6 \strokec6 )\cb1 \
\cb5     );\cb1 \
\cb5   \}\cb1 \
\cb5   categoryArray.splice(envIndex, \cf9 \strokec9 1\cf6 \strokec6 );\cb1 \
\cb5   res.status(\cf9 \strokec9 200\cf6 \strokec6 ).send(\cf8 \strokec8 `Envelope ID \cf7 \strokec7 $\{\cf6 \strokec6 searchId\cf7 \strokec7 \}\cf8 \strokec8  successfully deleted.`\cf6 \strokec6 );\cb1 \
\cb5 \});\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 \strokec4 //Error Handling\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 app.use((err, req, res, next) \cf7 \strokec7 =>\cf6 \strokec6  \{\cb1 \
\cb5   \cf7 \strokec7 const\cf6 \strokec6  status = err.status || \cf9 \strokec9 500\cf6 \strokec6 ;\cb1 \
\cb5   res.status(status).send(err.message);\cb1 \
\cb5 \});\cb1 \
\
\cb5 app.listen(PORT, \cf7 \strokec7 function\cf6 \strokec6  () \{\cb1 \
\cb5   console.log(\cf8 \strokec8 `Listening on port \cf7 \strokec7 $\{\cf6 \strokec6 PORT\cf7 \strokec7 \}\cf8 \strokec8 `\cf6 \strokec6 );\cb1 \
\cb5 \});\cb1 \
\
\pard\pardeftab720\partightenfactor0

\f0 \cf2 \outl0\strokewidth0 I have a database schema written out but would like your input on a database schema so I can compare mine to yours. I have the following possible tables:\
Envelope: id, name, balance, budget\
Payee: id, name, address, phone, email\
Payer: id, name, address, phone, email\
Expense: id, envelope, date, amount, description, payment method, payee\
Transfer: id, from envelope, to envelope, date, amount, description, name of transfer (optional)\
Income: id, date, amount, description, Payer}